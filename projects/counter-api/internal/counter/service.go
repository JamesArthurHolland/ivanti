// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc). DO NOT EDIT.

package counter

import (
	"context"
	"database/sql"
	"fmt"
	"log/slog"

	"github.com/google/uuid"

	pb "github.com/JamesArthurHolland/ivanti/profile-api/api/counter/v1"
	"github.com/JamesArthurHolland/ivanti/profile-api/internal/validation"
)

type Service struct {
	pb.UnimplementedCounterServiceServer
	querier *Queries
}

func (s *Service) FetchCounter(ctx context.Context, req *pb.FetchCounterRequest) (*pb.FetchCounterResponse, error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.FetchCounter(ctx, id)
	if err != nil {
		slog.Error("FetchCounter sql call failed", "error", err)
		return nil, err
	}
	return &pb.FetchCounterResponse{Value: result}, nil
}

func (s *Service) InsertCounter(ctx context.Context, req *pb.InsertCounterRequest) (*pb.InsertCounterResponse, error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.InsertCounter(ctx, id)
	if err != nil {
		slog.Error("InsertCounter sql call failed", "error", err)
		return nil, err
	}
	return &pb.InsertCounterResponse{Counter: toCounter(result)}, nil
}

func (s *Service) WithTx(tx *sql.Tx) *Service {
	return &Service{
		querier: s.querier.WithTx(tx),
	}
}
