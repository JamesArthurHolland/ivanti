// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package main

import (
	"context"
	"database/sql"
	_ "embed"
	"errors"
	"flag"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"syscall"
	"time"

	"github.com/flowchartsman/swaggerui"
	"go.uber.org/automaxprocs/maxprocs"

	// database driver
	_ "github.com/jackc/pgx/v5/stdlib"

	"github.com/JamesArthurHolland/ivanti/profile-api/internal/server"
)

//go:generate sqlc-grpc -m github.com/JamesArthurHolland/ivanti/counter -append

const serviceName = "github.com/JamesArthurHolland/ivanti/profile-api"

var (
	dbURL string

	//go:embed api/apidocs.swagger.json
	openAPISpec []byte
)

func main() {
	cfg := server.Config{
		ServiceName: serviceName,
	}
	var dev bool
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&cfg.Port, "port", 5000, "The server port")

	flag.BoolVar(&cfg.EnableCors, "cors", false, "Enable CORS middleware")
	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")

	flag.Parse()

	initLogger(dev)
	if err := run(cfg); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run(cfg server.Config) error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	db, err := sql.Open("pgx", dbURL)
	if err != nil {
		return err
	}
	defer db.Close()

	srv := server.New(cfg, registerServer(db), registerHandlers(), httpHandlers)

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		srv.Shutdown(ctx)
	}()
	return srv.ListenAndServe()
}

func initLogger(dev bool) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}

func httpHandlers(mux *http.ServeMux) {
	mux.HandleFunc("/liveness", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
	mux.Handle("/swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))

}
